LKM broadly classified into: 
for to use modules in kernel, 
    the feature CONFIG_MODULES must be enabled.
    CONFIG_MODULE_UNLOAD for rmmod
    MODULE_FORCE_UNLOAD for force removal, when kernel restricts to remove
    module at runtime.
1) device drivers
# character device
# block device
# network device
2) filesystem drivers
3) system calls: existing linux system calls can be override of your own

Kernel space: 
this is a set of where the kernel is hosted and where it
runs. Kernel memory (or kernel space) is a memory range, owned by the kernel,
protected by access flags, preventing any user apps from messing with the kernel
(un)knowingly.
It is a feature of a modern CPU, allowing it to operate either in privileged or
unprivileged mode.

Module dependencies: EXPORT_SYMBOL
a module can provide functions or variables, exporting them using the
EXPORT_SYMBOL macro, which makes them available for other modules. These are called
symbols.

depmod utility:
depmod is a tool that you run during the kernel build process to generate
module dependency files. It does that by reading each module in
/lib/modules/<kernel_release>/ to determine what symbols it should export and
what symbols it needs. The result of that process is written to the file
modules.dep , and its binary version modules.dep.bin . It is a kind of module
indexing.

Module loading and unloading:
insmod
modprobe
lsmod
rmmod
depmod
modinfo

/etc/modules-load.d/<filename>.conf:
If you want some module to be loaded at boot time, just create the file /etc/modules-
load.d/<filename>.conf , and add the module's name that should be loaded, one per
line. You may create as many .conf files as you need:
An example of /etc/modules-load.d/mymodules.conf is as follows:
#this line is a comment
uio
iwlwifi

Auto-loading:
depmod also processes
module files in order to extract and gather that information, and generates a
modules.alias file, located in /lib/modules/<kernel_release>/modules.alias ,
which will map devices to their drivers:

At this step, you'll need a user-space hot-plug agent (or device manager),
usually udev (or mdev ), that will register with the kernel in order to get
notified when a new device appears.

__init and __exit attributes:
1) refer include/linux/init.h for its usage and other attributes
#define __init	__section(.init.text) __cold  __latent_entropy __noinitretpoline
#define __exit	__section(.exit.text)
#define __initdata      __section(.init.data)
#define __initconst     __section(.init.rodata)

The __init keyword tells the linker to place the code in a dedicated section
into the kernel object file. This section is known in advance to the kernel, and
freed when the module is loaded and the init function finished. This applies
only to built-in drivers, not to loadable modules.

The same for the __exit keyword, whose corresponding code is omitted when the
module is compiled statically into the kernel, or when module unloading support
is not enabled.

Let's spend more time understanding how such attributes work. It is all about
object files called Executable and Linkable Format (ELF). An ELF object file is
made of various named sections. Some of these are mandatory and form the basis
of the ELF standard, but one can make up any section one wants and have it used
by special programs. This is what the kernel does.

# prints all sections
objdump -h module.ko

# dump the content of section
objdump -d -j .modinfo

Only a few of the sections are standerd ELF sections:
# .text
# .data
# .rodata
# .comment
# .bss (uninitialized data segment, also called as block started by symbol)

and others are added on demand for kernel
# .modeinfo: stores info about modules
# .init.text: stores code prefixed with the __init macro

The linker ( ld on Linux systems), which is a part of binutils, is responsible
for the placement of symbols (data, code, and so on) in the appropriate section
in the generated binary in order to be processed by the loader when the program
is executed. One may customize these sections, change their default location, or
even add additional sections by providing a linker script, called a linker
definition file (LDF) or linker definition script (LDS).

#Linux LDS file located in arch/<arch>/kernel/vmlinux.lds.S.

# Error handling
include/uapi/asm-generic/errno-base.h
include/uapi/asm-generic/errno.h

return -ERROR
return -EIO

# Handling null pointer errors
When it comes to returning an error from functions that are supposed to return a
pointer, functions often return the NULL pointer. since one does not exactly
know why this null pointer is returned. For that purpose, the kernel provides
three functions, ERR_PTR , IS_ERR , and PTR_ERR:

## void *ERR_PTR(long error);
The first actually returns the error value as a pointer. Given a function that
is likely to return -ENOMEM after a failed memory allocation, we have to do
something like return ERR_PTR(-ENOMEM).

Example:
indio_dev = devm_iio_device_alloc(&data->client->dev, sizeof(data));

if (!indio_dev)
	return ERR_PTR(-ENOMEM);
--------------------------------------------------------------------------------
## long IS_ERR(const void *ptr);
This is used to check whether the returned value is a pointer error or
not, if (IS_ERR(foo)).

Example:
struct iio_dev *my_indio_dev = indiodev_setup();
if (IS_ERR(my_indio_dev))
	return PTR_ERR(data->acc_indio_dev);

--------------------------------------------------------------------------------
## long PTR_ERR(const void *ptr);
This returns the actual error code return PTR_ERR(foo);

--------------------------------------------------------------------------------

Kernel coding style: error values to be return:
If the name of a function is an action or an imperative command, the function
should return an error-code integer. If the name is a predicate, the function
should return a succeeded Boolean.

For example, add work is a command, and the add_work() function returns 0 for
success or -EBUSY for failure. In the same way, PCI device present is a
predicate, and the pci_dev_present() function returns 1 if it succeeds in
finding a matching device or 0 if it doesn't.

--------------------------------------------------------------------------------

Message Printing: printk()
--------------------------
include/linux/kern_levels.h

#define KERN_SOH "\001" /* ASCII Start Of Header */
#define KERN_SOH_ASCII '\001' 

#define KERN_EMERG KERN_SOH "0" /* system is unusable */
#define KERN_ALERT KERN_SOH "1" /* action must be taken immediately */

#define KERN_CRIT KERN_SOH "2" /* critical conditions */ 
#define KERN_ERR KERN_SOH "3" /* error conditions */

#define KERN_WARNING KERN_SOH "4" /* warning conditions */
#define KERN_NOTICE KERN_SOH "5" /* normal but significant condition */

#define KERN_INFO KERN_SOH "6" /* informational */
#define KERN_DEBUG KERN_SOH "7" /* debug-level messages */

printk(KERN_ERR "This is an error\n");

CONFIG_DEFAULT_MESSAGE_LOGLEVEL
--------------------------------------------------------------------------------
If you omit the debug level ( printk("This is an error\n") ), the kernel will
provide one to the function, depending on the CONFIG_DEFAULT_MESSAGE_LOGLEVEL
config option, which is the default kernel log level.

--------------------------------------------------------------------------------
One may actually use one of the following, much more meaningful macros, which
are wrappers around those defined previously: 
pr_emerg , 
pr_alert , 
pr_crit ,
pr_err , 
pr_warning , 
pr_notice , 
pr_info , and 
pr_debug :

pr_err("This is an error\n");
is same as
printk(KERN_ERR "This is an error\n");

The reality of printk() is that, whenever it is called, the kernel compares the
message log level with the current console log level; if the former is higher
(lower value) than the latter, the message will be immediately printed to the
console. You can check your log level parameters with:

cat /proc/sys/kernel/printk
4 4 1 7

the first value is the current log level (4), and 
the second is the default one, according to the CONFIG_DEFAULT_MESSAGE_LOGLEVEL option.

The current log level can be changed with:
# echo <level> > /proc/sys/kernel/printk

example:
echo 6 > /proc/sys/kernel/printk

cat /proc/sys/kernel/printk
6	4	1	7

A list of kernel log levels is as follows:
/* integer equivalents of KERN_<LEVEL> */
#define LOGLEVEL_SCHED -2 /* Deferred messages from sched code * are set to this special level */
#define LOGLEVEL_DEFAULT -1 /* default (or last) loglevel */
#define LOGLEVEL_EMERG 0 /* system is unusable */
#define LOGLEVEL_ALERT 1 /* action must be taken immediately */
#define LOGLEVEL_CRIT 2 /* critical conditions */
#define LOGLEVEL_ERR 3 /* error conditions */
#define LOGLEVEL_WARNING 4 /* warning conditions */
#define LOGLEVEL_NOTICE 5 /* normal but significant condition */
#define LOGLEVEL_INFO 6 /* informational */
#define LOGLEVEL_DEBUG 7 /* debug-level messages */

PRINTK NEVER BLOCKS
-------------------
printk() never blocks and is safe enough to be called even from atomic
contexts. It tries to lock the console and print the message. If locking fails,
the output will be written into a buffer and the function will return, never
blocking. The current console holder will then be notified about new
messages and will print them before releasing the console.

Dynamic debug:
----------------
The kernel supports other debug methods too, either dynamically or by using
#define DEBUG on top of the file. People interested in such debugging style can
refer to kernel documentation in Documentation/dynamic-debug-howto.txt file.

--------------------------------------------------------------------------------

Module parameters
--------------------------------------------------------------------------------

module_param() macro defined in include/linux/moduleparam.h

usage:
module_param(name, type, perm);

name : The name of the variable used as the parameter

type : The parameter's type (
		bool, 
		charp, 	// charp stands for char pointer
		byte, 
		short, 
		ushort, 
		int, 
		uint, 
		long, 
		ulong), 

perm : This represents the /sys/module/<module>/parameters/<param> file
permissions. Some of them are S_IWUSR , S_IRUSR , S_IXUSR , S_IRGRP , S_WGRP ,
and S_IRUGO , where:
	S_I is just a prefix
	R : read, W : write, X : execute
	USR : user, GRP : group, UGO : user, group, others

* If perm is 0 , the file parameter in sysfs will not be created. 

When using module parameters, one should use MODULE_PARM_DESC in order to describe
each of them. This macro will populate the module info section with each parameter's
description.


